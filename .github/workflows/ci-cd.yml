name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Validate-PR:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests
        run: mvn clean test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Unit Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit

  CodeQL-Security-Scan:
    runs-on: ubuntu-latest
    needs: Validate-PR
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build application
        run: mvn clean compile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  Build-and-Push-Image:
    runs-on: ubuntu-latest
    needs: [Validate-PR, CodeQL-Security-Scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      app_version: ${{ steps.version.outputs.version }}
      app_environment: ${{ steps.version.outputs.environment }}
    steps:
      # Checkout, setup JDK, cache, extract version, build, login, meta, build & push image
      # (same as your current build-and-deploy job up to and including "Build and push Docker image")
      # ... (copy steps up to and including "Build and push Docker image" here)
      # Example:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Extract version from tag
        id: version
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "environment=$(echo $VERSION | grep -oE '(dev|test|prod)' || echo 'prod')" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      - name: Build application
        run: |
          mvn clean package -DskipTests \
            -Dapp.version=${{ steps.version.outputs.version }} \
            -Dapp.environment=${{ steps.version.outputs.environment }}
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.version.outputs.version }}
            APP_ENVIRONMENT=${{ steps.version.outputs.environment }}

  Deploy-Openshift-Local:
    runs-on: self-hosted
    needs: Build-and-Push-Image
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for oc CLI
        id: check-oc
        run: |
          if command -v oc >/dev/null 2>&1; then
            echo "oc_installed=true" >> $GITHUB_OUTPUT
          else
            echo "oc_installed=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up OpenShift CLI
        if: steps.check-oc.outputs.oc_installed == 'false'
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4.10.0"

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }} --insecure-skip-tls-verify=true

      - name: Deploy to OpenShift
        run: |
          oc project ${{ secrets.OPENSHIFT_PROJECT }} || oc new-project ${{ secrets.OPENSHIFT_PROJECT }}
          envsubst < openshift/deployment.yml | oc apply -f -
          envsubst < openshift/service.yml | oc apply -f -
          envsubst < openshift/route.yml | oc apply -f -
          oc rollout status deployment/intflow-service --timeout=300s
        env:
          IMAGE_TAG: ${{ needs.build-and-push-image.outputs.image_tag }}
          APP_VERSION: ${{ needs.build-and-push-image.outputs.app_version }}
          APP_ENVIRONMENT: ${{ needs.build-and-push-image.outputs.app_environment }}

      - name: Run post-deployment tests
        id: post_tests
        continue-on-error: true
        run: |
          ROUTE_URL=$(oc get route intflow-service -o jsonpath='{.spec.host}')
          echo "Testing deployment at: https://$ROUTE_URL"
          sleep 30
          mvn test -Dtest=karate.ApiIntFlowServiceTest -Dkarate.env=test -Dkarate.options="--tags ~@ignore" \
            -Dkarate.baseUrl=https://$ROUTE_URL

      - name: Rollback if post-deployment tests failed
        if: steps.post_tests.outcome == 'failure'
        run: |
          echo "Post-deployment tests failed, rolling back to previous version..."
          oc rollout undo deployment/intflow-service
          oc rollout status deployment/intflow-service --timeout=300s

      - name: Upload Karate test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: karate-postdeployment-test-results
          path: |
            target/karate-reports/
            target/surefire-reports/
