name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'feature/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # PR Validation Pipeline
  PR-Validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      checks: write
      contents: read
      security-events: write
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üì¶ Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: üß™ Run Unit Tests
        run: mvn clean test

      - name: üìä Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Unit Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: üîê Run Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

      - name: üèóÔ∏è Build Validation
        run: mvn clean package -DskipTests

  # Version Analysis
  Version-Analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/'))
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.version.outputs.environment }}
      should_deploy: ${{ steps.version.outputs.should_deploy }}
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìä Generate Version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch - patch version bump
            NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
            ENVIRONMENT="prod"
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.ref }}" =~ ^refs/heads/feature/ ]]; then
            # Feature branch - preview version
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/feature\///')
            NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))-feature-${BRANCH_NAME}-$(git rev-parse --short HEAD)"
            ENVIRONMENT="dev"
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger
            NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))-manual"
            ENVIRONMENT="${{ github.event.inputs.deployment_target }}"
            SHOULD_DEPLOY="true"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è New Version: $NEW_VERSION"
          echo "üåç Environment: $ENVIRONMENT"

  # Build and Push Container
  Build-and-Push:
    runs-on: ubuntu-latest
    needs: Version-Analysis
    if: needs.Version-Analysis.outputs.should_deploy == 'true'
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üì¶ Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: üß™ Run Tests
        run: mvn clean test

      - name: üî® Build Application
        run: |
          mvn clean package -DskipTests \
            -Dapp.version=${{ needs.Version-Analysis.outputs.version }} \
            -Dapp.environment=${{ needs.Version-Analysis.outputs.environment }}

      - name: üîë Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: üè∑Ô∏è Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.Version-Analysis.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üê≥ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ needs.Version-Analysis.outputs.version }}
            APP_ENVIRONMENT=${{ needs.Version-Analysis.outputs.environment }}

  # Deploy to OpenShift
  Deploy-OpenShift:
    runs-on: self-hosted
    needs: [Version-Analysis, Build-and-Push]
    if: needs.Version-Analysis.outputs.should_deploy == 'true'
    environment: ${{ needs.Version-Analysis.outputs.environment }}
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup OpenShift CLI
        run: |
          if ! command -v oc >/dev/null 2>&1; then
            curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
            tar -xzf openshift-client-linux.tar.gz
            sudo mv oc /usr/local/bin/
          fi
          oc version --client

      - name: üîê Login to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }} --insecure-skip-tls-verify=true

      - name: üöÄ Deploy Application
        run: |
          # Create or switch to project
          PROJECT_NAME="${{ secrets.OPENSHIFT_PROJECT }} || oc new-project ${{ secrets.OPENSHIFT_PROJECT }}"
          oc project $PROJECT_NAME || oc new-project $PROJECT_NAME
          
          # Deploy application
          envsubst < openshift/deployment.yml | oc apply -f -
          envsubst < openshift/service.yml | oc apply -f -
          envsubst < openshift/route.yml | oc apply -f -
          
          # Wait for rollout
          oc rollout status deployment/intflow-service --timeout=300s
        env:
          IMAGE_TAG: ${{ needs.Build-and-Push.outputs.image_tag }}
          APP_VERSION: ${{ needs.Version-Analysis.outputs.version }}
          APP_ENVIRONMENT: ${{ needs.Version-Analysis.outputs.environment }}

      - name: üß™ Health Check
        run: |
          PROJECT_NAME="${{ secrets.OPENSHIFT_PROJECT }} || oc new-project ${{ secrets.OPENSHIFT_PROJECT }}"
          oc project $PROJECT_NAME
          
          echo "üîç Checking application health..."
          
          # Wait for pods to be ready
          sleep 30
          
          # Check deployment status
          oc get deployment/intflow-service -o wide
          
          # Test health endpoint
          ROUTE_URL=$(oc get route intflow-service -o jsonpath='{.spec.host}' 2>/dev/null || echo "")
          if [[ -n "$ROUTE_URL" ]]; then
            echo "üåê Testing at: https://$ROUTE_URL"
            curl -f "https://$ROUTE_URL/health" || echo "‚ö†Ô∏è Health check failed"
          else
            echo "‚ö†Ô∏è No external route found"
            oc exec deployment/intflow-service -- curl -f http://localhost:8080/health
          fi

      - name: üéâ Deployment Summary
        run: |
          echo "üéâ Deployment Complete!"
          echo "‚úÖ Version: ${{ needs.Version-Analysis.outputs.version }}"
          echo "üåç Environment: ${{ needs.Version-Analysis.outputs.environment }}"
          echo "üì¶ Image: ${{ needs.Build-and-Push.outputs.image_tag }}"
          
          PROJECT_NAME="${{ secrets.OPENSHIFT_PROJECT }}-${{ needs.Version-Analysis.outputs.environment }}"
          ROUTE_URL=$(oc get route intflow-service -o jsonpath='{.spec.host}' -n $PROJECT_NAME 2>/dev/null || echo "Internal only")
          echo "üîó URL: https://$ROUTE_URL"